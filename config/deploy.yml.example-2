# Name of your application. Used to uniquely configure containers.
service: blog-space

# Name of the container image.
# DOCKER_HUB_USERNAME is name of Docker Hub account.
# Get it from the companion app at kamal.cklos.foo
# Your Docker Hub credentials => Username
image: kamaldh0/blog-space ## CHANGE ME

# Deploy to these servers.
# Get IP from the companion app at kamal.cklos.foo
# Pick one of the hosts
servers:
  web:
    hosts:
      - 255.255.255.100 ## CHANGE ME

  worker:
    roles:
      - 255.255.255.100 ## CHANGE ME
    cmd: "bundle exec sidekiq"

# Credentials for your image host.
registry:
  username: kamaldh0 ## CHANGE ME
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    FOO: bar
    POSTGRES_HOST: blog-space-postgres
    POSTGRES_USER: blog-space
    POSTGRES_DB: blog_space_production
  secret:
    - SECRET_KEY_BASE
    - POSTGRES_PASSWORD
    - REDIS_URL

# Configure the builder to use for building the image.
builder:
  remote:
    arch: amd64
    host: ssh://root@255.255.255.200 ## CHANGE ME

accessories:
  postgres:
    image: "postgres:16-alpine"
    roles:
      - web
    env:
      clear:
        POSTGRES_USER: "blog-space"
        POSTGRES_DB: "blog_space_production"
      secret:
        - POSTGRES_PASSWORD
    files:
      - "config/init.sql:/docker-entrypoint-initdb.d/init.sql"
    directories:
      - "data:/var/lib/postgresql/data"
    options:
      shm-size: "128mb"

  redis:
    image: "redis:7.2-alpine"
    roles:
      - web
    directories:
      - data:/data
    cmd: "redis-server --requirepass <%= File.read('.env')[/REDIS_PASSWORD="(.*?)"/, 1] %>"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets
